#!/usr/bin/env bash
# Trae Template Pre-Commit Hook
# Enforces task DB initialization, branch validation, and PROJECT_STATUS.md sync
#
# Usage:
#   Copy this file to .git/hooks/pre-commit and make it executable:
#     cp .trae/rules/pre-commit-hook.sh .git/hooks/pre-commit
#     chmod +x .git/hooks/pre-commit
#
# To bypass this hook for an exceptional commit:
#   git commit --no-verify -m "your message"

set -euo pipefail

CLI="python .trae/task-management/task_manager.py"
DB_DIR=".trae/task-management"

# Load .env if present (minimal parser, does not override existing env)
if [[ -f .env ]]; then
  while IFS= read -r line || [[ -n "$line" ]]; do
    # Strip CR
    line="${line%$'\r'}"
    # Skip empty or whitespace-only lines
    [[ -z "${line//[[:space:]]/}" ]] && continue
    # Skip comments (allow leading whitespace)
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    # Require KEY=VALUE
    [[ "$line" != *"="* ]] && continue
    key="${line%%=*}"
    val="${line#*=}"
    # Trim spaces around key and val
    key="${key#${key%%[![:space:]]*}}"; key="${key%${key##*[![:space:]]}}"
    val="${val#${val%%[![:space:]]*}}"; val="${val%${val##*[![:space:]]}}"
    # Remove surrounding single or double quotes from value
    if [[ "$val" == \"*\" && "$val" == *\" ]]; then val="${val:1:-1}"; fi
    if [[ "$val" == \'*\' && "$val" == *\' ]]; then val="${val:1:-1}"; fi
    # Export if not already set
    if [[ -n "$key" && -z "${!key:-}" ]]; then
      export "$key"="$val"
    fi
  done < .env
fi

# Resolve project id: env > .trae/project-id > folder name
if [[ -n "${TRAE_PROJECT_ID:-}" ]]; then
  PROJECT_ID="$TRAE_PROJECT_ID"
elif [[ -f .trae/project-id ]]; then
  PROJECT_ID="$(cat .trae/project-id | tr -d '\n' | tr -d '\r')"
  if [[ -z "$PROJECT_ID" ]]; then PROJECT_ID="$(basename "$PWD")"; fi
else
  PROJECT_ID="$(basename "$PWD")"
fi
DB_PATH="$DB_DIR/${PROJECT_ID}.db"
STATUS_MD=".trae/project-overview/PROJECT_STATUS.md"

# 1) Ensure CLI exists
if [ ! -f .trae/task-management/task_manager.py ]; then
  echo "[pre-commit] ERROR: Task manager CLI not found at .trae/task-management/task_manager.py"
  echo "Please ensure the template is intact."
  exit 1
fi

# 2) Ensure DB exists
if [ ! -f "$DB_PATH" ]; then
  echo "[pre-commit] ERROR: Task DB not found at $DB_PATH"
  echo "Initialize it with one of:"
  echo "  echo 'TRAE_PROJECT_ID=$PROJECT_ID' > .env && $CLI init --seed"
  echo "  echo '$PROJECT_ID' > .trae/project-id && $CLI init --seed"
  echo "  TRAE_PROJECT_ID=$PROJECT_ID $CLI init --seed"
  exit 1
fi

# 3) Validate feature branch naming
if ! $CLI validate-branch >/dev/null 2>&1; then
  echo "[pre-commit] ERROR: Branch name does not match a feature folder in .trae/features/"
  $CLI validate-branch || true
  exit 1
fi

# 4) Prevent manual edits to PROJECT_STATUS.md (managed by CLI)
STAGED_FILES=$(git diff --cached --name-only)
if echo "$STAGED_FILES" | grep -q "^$STATUS_MD$"; then
  echo "[pre-commit] ERROR: $STATUS_MD is auto-generated by the task manager."
  echo "Run: $CLI sync-markdown, then stage the file again."
  exit 1
fi

# Success
exit 0